//
//  <%= model.name %>.swift
//  MetaModel
//
//  Created by MetaModel script.
//

import Foundation
import SQLite

public struct <%= model.name %> {
    public let id: Int
    <% model.properties.each do |property| %>
    <%= """public var #{property.key}: #{property.type} {
      didSet { try! db.run(meta.query.update(meta.#{property.key} <- #{property.key})) }
    }""" %>
    <% end %>
}

extension <%= model.name %> {
    public init(record: SQLite.Row) {
      self.init(<%= model.properties.map { |property| "#{property.key}: record[meta.#{property.key}]" }.join(", ") %>)
    }
}

extension <%= model.name %> {
    struct meta {
        static let table = Table("<%= "#{model.table_name}" %>")
        static let id = Expression<Int>("id")
        <% model.properties.each do |property| %><%= "static let #{property.key} = Expression<#{property.type}>(\"#{property.key}\")" %>
        <% end %>
        static var query: QueryType { get { return meta.table.filter(meta.id == self.id) } }

        static func createTable() {
            let _ = try? db.run(table.create { t in
                t.column(id, primaryKey: true)
                <% model.properties.each do |property| %><%= "t.column(property.key)\n" %><% end %>
            })
        }

        static func findOne(query: QueryType) -> <%= model.name %>? {
            for record in try! db.prepare(query) {
                return <%= model.name %>(record: record)
            }
            return nil
        }

        static func findAll(query: QueryType) -> [<%= model.name %>] {
            var result: [<%= model.name %>] = []
            for record in try! db.prepare(query) {
                result.append(<%= model.name %>(record: record))
            }
            return result
        }
    }

}

public extension <%= model.name %> {
    static func all() -> [<%= model.name %>] {
        var result: [<%= model.name %>] = []
        for record in try! db.prepare(meta.table) {
            result.append(<%= model.name %>(record: record))
        }
        return result
    }

    static func deleteAll() {
        let _ = try? db.run(meta.table.delete())
    }

    static func count() -> Int {
        return db.scalar(meta.table.count)
    }

    static func create(<%= model.properties.map { |property| "#{property.key}: #{property.type}" }.join(", ") %>) -> <%= model.name %> {
        let insert = meta.table.insert(<%= model.properties.map { |property| "meta.#{property.key} <- #{property.key}" }.join(", ") %>)
        let _ = try? db.run(insert)
        return <%= model.name %>(<%= model.properties.map { |property| "#{property.key}: #{property.key}" }.join(", ") %>)
    }

}
