public extension <%= model.name %> {
    var itself: String { get { return "WHERE \(<%= model.name %>.tableName.unwrapped).\("id".unwrapped) = \(id)" } }

    func delete() {
        let deleteSQL = "DELETE FROM \(<%= model.name %>.tableName.unwrapped) \(itself)"
        executeSQL(deleteSQL)
    }

    mutating func update(name name: String?) -> <%= model.name %> {
        return self.update([.name: name])
    }

    mutating func update(email email: String) -> <%= model.name %> {
        return self.update([.email: email])
    }

    mutating func update(attributes: [<%= model.name %>.Column: Any]) -> <%= model.name %> {
        var setSQL: [String] = []
        for (key, _) in attributes {
            switch key {
            case .name: setSQL.append("\(key.unwrapped) = \(self.name?.unwrapped)")
            case .email: setSQL.append("\(key.unwrapped) = \(self.email.unwrapped)")
            default: break
            }
        }
        let updateSQL = "UPDATE \(<%= model.name %>.tableName.unwrapped) SET \(setSQL.joinWithSeparator(", ")) \(itself)"
        executeSQL(updateSQL) {
            for (key, value) in attributes {
                switch key {
                case .name: self.name = value as? String
                case .email: self.email = value as! String
                default: break
                }
            }
        }
        return self
    }
}
