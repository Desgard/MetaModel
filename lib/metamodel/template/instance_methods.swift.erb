public extension <%= model.name %> {
    var itself: String { get { return "WHERE \(<%= model.name %>.tableName.unwrapped).\("id".unwrapped) = \(id)" } }

    func delete() {
        let deleteSQL = "DELETE FROM \(<%= model.name %>.tableName.unwrapped) \(itself)"
        executeSQL(deleteSQL)
    }

    <% model.properties_exclude_id.each do |property| %><%= """mutating func update(#{property.key} #{property.key}: #{property.type}) -> #{model.name} {
        return self.update([.#{property.key}: #{property.key}])
    }""" %>
    <% end %>
    mutating func update(attributes: [<%= model.name %>.Column: Any]) -> <%= model.name %> {
        var setSQL: [String] = []
        for (key, _) in attributes {
            switch key {
            <% model.properties_exclude_id.each do |property| %><%= """case .#{property.key}: setSQL.append(\"\\(key.unwrapped) = \\(#{property.key}#{property.is_optional? ? "?" : ""}.unwrapped)\")""" %>
            <% end %>default: break
            }
        }
        let updateSQL = "UPDATE \(<%= model.name %>.tableName.unwrapped) SET \(setSQL.joinWithSeparator(", ")) \(itself)"
        executeSQL(updateSQL) {
            for (key, value) in attributes {
                switch key {
                <% model.properties_exclude_id.each do |property| %><%= """case .#{property.key}: self.#{property.key} = value as#{property.is_optional? ? "?" : "!"} #{property.type_without_optional}""" %>
                <% end %>default: break
                }
            }
        }
        return self
    }
    mutating var save: <%= model.name %> {
        get {
            <%= model.name %>.create(id<%= model.property_exclude_id_key_value_pairs %>)
            update([<% model.properties.each do |property| %><%= ".#{property.name}: #{property.name}" %><% end.join(", ") %>])
            return self
        }
    }
}
